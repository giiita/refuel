package refuel.json.codecs

import refuel.json.JsonVal
import refuel.json.JsonVal.{JsArray, JsEmpty, JsEntry, JsObject, JsString}
import refuel.json.codecs.translation.DeriveTupleCodecs
import refuel.json.compiletime.DeriveCodecs
import refuel.json.compiletime.DeriveWritesWithIndex.inferWrite
import refuel.json.exception.{IllegalJsonFormatException, InvalidDeserializationException}

/**
  * This is a codec pool object of tuples 1 ~ 22.
  * Since any flatMap generates a separate ".class" file when compiling,
  * it may damage the file system, so it is necessary to use a separate tuple parser.
  *
  * Each tuple codec requires tuple size children codec, which are basically generated by macro.
  * Direct calls are deprecated.
  */
private[refuel] trait TupleCodecsImpl {
  // For macro tuple expansion
  // Derive Map[(String, Foo)] = Tuple2[String, Foo]
  // Found Tuple.Map[Tuple2[String, Foo], Codec] => Tuple2[String, Foo]
  // Derive Tuple.Map[Tuple2[String, Foo], Codec] = Tuple2[String, Foo] => Tuple.Map[Tuple2[String, Foo], Codec]
  // = Derive[String] *: Derive[Foo]
  given __HTuple[T <: Tuple, C[_]](using projector: CodecTypeProjection[C]): scala.Conversion[Tuple.Map[T, C], C[T]] = { x =>
    projector.both[T](
      { bf =>
        bf match {
          case JsArray(entries) => Tuple.fromArray(
            x.toArray.zip(entries).map {
              case (codec, entry) =>
                projector.read(entry)(using codec.asInstanceOf[C[Any]])
            }
          ).asInstanceOf[T]
          case _ => throw InvalidDeserializationException(s"Cannot deserialize to Tuple: $bf")
        }
      },
      { t =>
        val elmArr = t.toArray
        x.toArray.zipWithIndex.foldLeft[JsonVal](JsArray.Empty) { (result, codecAsTAndI) =>
          result joinUnsafe projector.write(elmArr(codecAsTAndI._2))(using codecAsTAndI._1.asInstanceOf[C[Any]])
        }
      }
    )
  }

  inline def tup[T <: Tuple, C[_]: CodecTypeProjection]: C[T] = {
    import scala.compiletime.summonFrom
    __HTuple[T, C].apply(
      summonFrom[Tuple.Map[T, C]] {
        case x: Tuple.Map[T, C] => x
        case _ => DeriveTupleCodecs.foldSummon[T, C]
      }
    )
  }

  given __tuple2[A, B, CP[_]: CodecTypeProjection](using a: CP[A], b: CP[B]): CP[(A, B)] = tup[(A, B), CP]
  given __tuple3[A, B, C, CP[_]: CodecTypeProjection](using a: CP[A], b: CP[B], c: CP[C]): CP[(A, B, C)] = tup[(A, B, C), CP]
  given __tuple4[A, B, C, D, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D]
  ): CP[(A, B, C, D)] = tup[(A, B, C, D), CP]

  given __tuple5[A, B, C, D, E, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E]
  ): CP[(A, B, C, D, E)] = tup[(A, B, C, D, E), CP]

  given __tuple6[A, B, C, D, E, F, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F]
  ): CP[(A, B, C, D, E, F)] = tup[(A, B, C, D, E, F), CP]

  given __tuple7[A, B, C, D, E, F, G, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G]
  ): CP[(A, B, C, D, E, F, G)] = tup[(A, B, C, D, E, F, G), CP]

  given __tuple8[A, B, C, D, E, F, G, H, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H]
  ): CP[(A, B, C, D, E, F, G, H)] = tup[(A, B, C, D, E, F, G, H), CP]

  given __tuple9[A, B, C, D, E, F, G, H, I, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I]
  ): CP[(A, B, C, D, E, F, G, H, I)] = tup[(A, B, C, D, E, F, G, H, I), CP]

  given __tuple10[A, B, C, D, E, F, G, H, I, J, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J]
  ): CP[(A, B, C, D, E, F, G, H, I, J)] = tup[(A, B, C, D, E, F, G, H, I, J), CP]

  given __tuple11[A, B, C, D, E, F, G, H, I, J, K, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K)] = tup[(A, B, C, D, E, F, G, H, I, J, K), CP]

  given __tuple12[A, B, C, D, E, F, G, H, I, J, K, L, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L), CP]

  given __tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M), CP]

  given __tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), CP]

  given __tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), CP]

  given __tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), CP]

  given __tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), CP]

  given __tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q],
      r: CP[R]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), CP]

  given __tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q],
      r: CP[R],
      s: CP[S]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), CP]

  given __tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q],
      r: CP[R],
      s: CP[S],
      t: CP[T]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), CP]

  given __tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q],
      r: CP[R],
      s: CP[S],
      t: CP[T],
      u: CP[U]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), CP]

  given __tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, CP[_]: CodecTypeProjection](
      using a: CP[A],
      b: CP[B],
      c: CP[C],
      d: CP[D],
      e: CP[E],
      f: CP[F],
      g: CP[G],
      h: CP[H],
      i: CP[I],
      j: CP[J],
      k: CP[K],
      l: CP[L],
      m: CP[M],
      n: CP[N],
      o: CP[O],
      p: CP[P],
      q: CP[Q],
      r: CP[R],
      s: CP[S],
      t: CP[T],
      u: CP[U],
      v: CP[V]
  ): CP[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)] = tup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V), CP]
}
