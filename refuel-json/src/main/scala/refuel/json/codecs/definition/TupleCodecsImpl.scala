package refuel.json.codecs.definition

import refuel.internal.json.codec.builder.JsKeyLitOps
import refuel.internal.json.{DeserializeResult, TupleCodecs}
import refuel.json.codecs.builder.context.keylit.SelfCirculationLit
import refuel.json.entry.{JsArray, JsObject, JsString}
import refuel.json.error.{DeserializeFailed, IllegalJsonSyntaxTreeBuilding}
import refuel.json.{Codec, Json}

/**
 * This is a codec pool object of tuples 1 ~ 22.
 * Since any flatMap generates a separate ".class" file when compiling,
 * it may damage the file system, so it is necessary to use a separate tuple parser.
 *
 * Each tuple codec requires tuple size children codec, which are basically generated by macro.
 * Direct calls are deprecated.
 */
private[codecs] trait TupleCodecsImpl extends TupleCodecs {

  private[this] sealed abstract class TupleCodec[X] extends Codec[X] {
    override def deserialize(bf: Json): Either[DeserializeFailed, X] = tb(
      keyLiteralRef.rec(bf).head match {
        case JsObject(x) => x.map(_._2).toList
        case JsArray(x) => x.toList
        case _ => throw IllegalJsonSyntaxTreeBuilding("Tuple deserialization was expected JsObject or JsArray")
      }
    )

    protected def tb(that: List[Json]): Either[DeserializeFailed, X]

    override def keyLiteralRef: JsKeyLitOps = SelfCirculationLit
  }

  private[this] class Tuple2CodecConst[A, B](a: Codec[A], b: Codec[B]) extends TupleCodec[(A, B)] {
    override def serialize(t: (A, B)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2)

    protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B)] = that match {
      case ae :: be :: _ =>
        DeserializeResult(a.deserialize(ae)).and(b.deserialize(be)).asTuple2
    }
  }

  private[this] class Tuple3CodecConst[A, B, C](a: Codec[A], b: Codec[B], c: Codec[C]) extends TupleCodec[(A, B, C)] {
    override def serialize(t: (A, B, C)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3)

    protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C)] = that match {
      case ae :: be :: ce :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce)
        }.asTuple3
    }
  }

  private[this] class Tuple4CodecConst[A, B, C, D](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D]) extends TupleCodec[(A, B, C, D)] {
    override def serialize(t: (A, B, C, D)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4)

    protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D)] = that match {
      case ae :: be :: ce :: de :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de)
        }.asTuple4
    }
  }

  private[this] class Tuple5CodecConst[A, B, C, D, E](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E]) extends TupleCodec[(A, B, C, D, E)] {
    override def serialize(t: (A, B, C, D, E)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E)] = that match {
      case ae :: be :: ce :: de :: ee :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee)
        }.asTuple5
    }
  }

  private[this] class Tuple6CodecConst[A, B, C, D, E, F](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F]) extends TupleCodec[(A, B, C, D, E, F)] {
    override def serialize(t: (A, B, C, D, E, F)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe)
        }.asTuple6
    }
  }

  private[this] class Tuple7CodecConst[A, B, C, D, E, F, G](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G]) extends TupleCodec[(A, B, C, D, E, F, G)] {
    override def serialize(t: (A, B, C, D, E, F, G)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge)
        }.asTuple7
    }
  }

  private[this] class Tuple8CodecConst[A, B, C, D, E, F, G, H](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H]) extends TupleCodec[(A, B, C, D, E, F, G, H)] {
    override def serialize(t: (A, B, C, D, E, F, G, H)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he)
        }.asTuple8
    }
  }

  private[this] class Tuple9CodecConst[A, B, C, D, E, F, G, H, I](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I]) extends TupleCodec[(A, B, C, D, E, F, G, H, I)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie)
        }.asTuple9
    }
  }

  private[this] class Tuple10CodecConst[A, B, C, D, E, F, G, H, I, J](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je)
        }.asTuple10
    }
  }

  private[this] class Tuple11CodecConst[A, B, C, D, E, F, G, H, I, J, K](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke)
        }.asTuple11
    }
  }

  private[this] class Tuple12CodecConst[A, B, C, D, E, F, G, H, I, J, K, L](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le)
        }.asTuple12
    }
  }


  private[this] class Tuple13CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me)
        }.asTuple13
    }
  }

  private[this] class Tuple14CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne)
        }.asTuple14
    }
  }

  private[this] class Tuple15CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe)
        }.asTuple15
    }
  }

  private[this] class Tuple16CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe)
        }.asTuple16
    }
  }

  private[this] class Tuple17CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe)
        }.asTuple17
    }
  }

  private[this] class Tuple18CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17) ++
      JsString("_18") ++ r.serialize(t._18)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: re :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe) and
          r.deserialize(re)
        }.asTuple18
    }
  }

  private[this] class Tuple19CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17) ++
      JsString("_18") ++ r.serialize(t._18) ++
      JsString("_19") ++ s.serialize(t._19)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: re :: se :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe) and
          r.deserialize(re) and
          s.deserialize(se)
        }.asTuple19
    }
  }

  private[this] class Tuple20CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], tc: Codec[T]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17) ++
      JsString("_18") ++ r.serialize(t._18) ++
      JsString("_19") ++ s.serialize(t._19) ++
      JsString("_20") ++ tc.serialize(t._20)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: re :: se :: te :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe) and
          r.deserialize(re) and
          s.deserialize(se) and
          tc.deserialize(te)
        }.asTuple20
    }
  }

  private[this] class Tuple21CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], tc: Codec[T], u: Codec[U]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17) ++
      JsString("_18") ++ r.serialize(t._18) ++
      JsString("_19") ++ s.serialize(t._19) ++
      JsString("_20") ++ tc.serialize(t._20) ++
      JsString("_21") ++ u.serialize(t._21)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: re :: se :: te :: ue :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe) and
          r.deserialize(re) and
          s.deserialize(se) and
          tc.deserialize(te) and
          u.deserialize(ue)
        }.asTuple21
    }
  }

  private[this] class Tuple22CodecConst[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], tc: Codec[T], u: Codec[U], v: Codec[V]) extends TupleCodec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)] {
    override def serialize(t: (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)): Json = JsObject() ++
      JsString("_1") ++ a.serialize(t._1) ++
      JsString("_2") ++ b.serialize(t._2) ++
      JsString("_3") ++ c.serialize(t._3) ++
      JsString("_4") ++ d.serialize(t._4) ++
      JsString("_5") ++ e.serialize(t._5) ++
      JsString("_6") ++ f.serialize(t._6) ++
      JsString("_7") ++ g.serialize(t._7) ++
      JsString("_8") ++ h.serialize(t._8) ++
      JsString("_9") ++ i.serialize(t._9) ++
      JsString("_10") ++ j.serialize(t._10) ++
      JsString("_11") ++ k.serialize(t._11) ++
      JsString("_12") ++ l.serialize(t._12) ++
      JsString("_13") ++ m.serialize(t._13) ++
      JsString("_14") ++ n.serialize(t._14) ++
      JsString("_15") ++ o.serialize(t._15) ++
      JsString("_16") ++ p.serialize(t._16) ++
      JsString("_17") ++ q.serialize(t._17) ++
      JsString("_18") ++ r.serialize(t._18) ++
      JsString("_19") ++ s.serialize(t._19) ++
      JsString("_20") ++ tc.serialize(t._20) ++
      JsString("_21") ++ u.serialize(t._21) ++
      JsString("_22") ++ v.serialize(t._22)

    override protected def tb(that: List[Json]): Either[DeserializeFailed, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)] = that match {
      case ae :: be :: ce :: de :: ee :: fe :: ge :: he :: ie :: je :: ke :: le :: me :: ne :: oe :: pe :: qe :: re :: se :: te :: ue :: ve :: _ => {
        DeserializeResult(a.deserialize(ae)) and
          b.deserialize(be) and
          c.deserialize(ce) and
          d.deserialize(de) and
          e.deserialize(ee) and
          f.deserialize(fe) and
          g.deserialize(ge) and
          h.deserialize(he) and
          i.deserialize(ie) and
          j.deserialize(je) and
          k.deserialize(ke) and
          l.deserialize(le) and
          m.deserialize(me) and
          n.deserialize(ne) and
          o.deserialize(oe) and
          p.deserialize(pe) and
          q.deserialize(qe) and
          r.deserialize(re) and
          s.deserialize(se) and
          tc.deserialize(te) and
          u.deserialize(ue) and
          v.deserialize(ve)
        }.asTuple22
    }
  }

  override implicit def tuple2[A, B](implicit a: Codec[A], b: Codec[B]): Codec[(A, B)] = new Tuple2CodecConst(a, b)

  override implicit def tuple3[A, B, C](implicit a: Codec[A], b: Codec[B], c: Codec[C]): Codec[(A, B, C)] = new Tuple3CodecConst(a, b, c)

  override implicit def tuple4[A, B, C, D](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D]): Codec[(A, B, C, D)] = new Tuple4CodecConst(a, b, c, d)

  override implicit def tuple5[A, B, C, D, E](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E]): Codec[(A, B, C, D, E)] = new Tuple5CodecConst(a, b, c, d, e)

  override implicit def tuple6[A, B, C, D, E, F](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F]): Codec[(A, B, C, D, E, F)] = new Tuple6CodecConst(a, b, c, d, e, f)

  override implicit def tuple7[A, B, C, D, E, F, G](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G]): Codec[(A, B, C, D, E, F, G)] = new Tuple7CodecConst(a, b, c, d, e, f, g)

  override implicit def tuple8[A, B, C, D, E, F, G, H](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H]): Codec[(A, B, C, D, E, F, G, H)] = new Tuple8CodecConst(a, b, c, d, e, f, g, h)

  override implicit def tuple9[A, B, C, D, E, F, G, H, I](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I]): Codec[(A, B, C, D, E, F, G, H, I)] = new Tuple9CodecConst(a, b, c, d, e, f, g, h, i)

  override implicit def tuple10[A, B, C, D, E, F, G, H, I, J](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J]): Codec[(A, B, C, D, E, F, G, H, I, J)] = new Tuple10CodecConst(a, b, c, d, e, f, g, h, i, j)

  override implicit def tuple11[A, B, C, D, E, F, G, H, I, J, K](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K]): Codec[(A, B, C, D, E, F, G, H, I, J, K)] = new Tuple11CodecConst(a, b, c, d, e, f, g, h, i, j, k)

  override implicit def tuple12[A, B, C, D, E, F, G, H, I, J, K, L](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L)] = new Tuple12CodecConst(a, b, c, d, e, f, g, h, i, j, k, l)

  override implicit def tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M)] = new Tuple13CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m)

  override implicit def tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)] = new Tuple14CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n)

  override implicit def tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)] = new Tuple15CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)

  override implicit def tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)] = new Tuple16CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)

  override implicit def tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)] = new Tuple17CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)

  override implicit def tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)] = new Tuple18CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)

  override implicit def tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)] = new Tuple19CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s)

  override implicit def tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], t: Codec[T]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)] = new Tuple20CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t)

  override implicit def tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], t: Codec[T], u: Codec[U]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)] = new Tuple21CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u)

  override implicit def tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit a: Codec[A], b: Codec[B], c: Codec[C], d: Codec[D], e: Codec[E], f: Codec[F], g: Codec[G], h: Codec[H], i: Codec[I], j: Codec[J], k: Codec[K], l: Codec[L], m: Codec[M], n: Codec[N], o: Codec[O], p: Codec[P], q: Codec[Q], r: Codec[R], s: Codec[S], t: Codec[T], u: Codec[U], v: Codec[V]): Codec[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)] = new Tuple22CodecConst(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)
}
